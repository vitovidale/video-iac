version: '3.8'

services:
  # Serviço de Banco de Dados - PostgreSQL
  # Para persistir dados de usuários e status de vídeos
  db:
    image: postgres:15-alpine # Versão leve do PostgreSQL
    container_name: video-db
    environment:
      POSTGRES_DB: fiap_x_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432" # Mapeia a porta do container para a porta da sua máquina local
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d # Adiciona o volume para os scripts SQL de inicialização
    healthcheck: # Healthcheck para garantir que o banco está pronto
      test: ["CMD-SHELL", "pg_isready -U user -d fiap_x_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # Porta para comunicação AMQP
      - "15672:15672" # Porta para o painel de gerenciamento
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # Serviço de Autenticação de Usuário
  user-auth-service:
    build:
      context: ../user-auth-service # Garante que o contexto de build seja o diretório do serviço
      dockerfile: Dockerfile
    container_name: user-auth-service
    ports:
      - "5000:5000"
    environment:
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      PORT: 5000
      JWT_SECRET: "a_very_secure_and_random_jwt_secret_for_fiap_x_tests_gGf09sLp1k2JqW3rT4yU5iO6pA7sD8fG9hJ0kL1zX2cV3bN4mM5qQ6wE7rT8yU9iO0pA1sD2f" # Use uma chave segura em produção
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  # Serviço de Processamento de Vídeos (Seção corrigida)
  video-processor-service:
    build:
      context: ../video-processor-service # Aponta para o diretório do repositório video-processor-service
      dockerfile: Dockerfile # O Dockerfile está na raiz desse diretório
    container_name: video-processor-service
    ports:
      - "5001:5001"
    environment:
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      PORT: 5001
      JWT_SECRET: "a_very_secure_and_random_jwt_secret_for_fiap_x_tests_gGf09sLp1k2JqW3rT4yU5iO6pA7sD8fG9hJ0kL1zX2cV3bN4mM5qQ6wE7rT8yU9iO0pA1sD2f" # << MESMA CHAVE DO USER-AUTH-SERVICE!
    volumes:
      - processed_videos_data:/app/processed_videos # Volume para persistir os vídeos processados
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure

  # Serviço de Frontend (Exemplo)
  frontend:
    build:
      context: ../gray-video-portal # Aponta para o diretório do repositório gray-video-portal
      dockerfile: Dockerfile # O Dockerfile está na raiz desse diretório
    container_name: frontend
    ports:
      - "80:80" # Mapeia a porta 80 do contêiner para a porta 80 do host
    depends_on:
      user-auth-service:
        condition: service_started # Pode depender de outros serviços conforme necessário
    restart: on-failure

# Volumes nomeados para persistência de dados
volumes:
  db_data:
  processed_videos_data:
  # Adicione outros volumes conforme necessário para outros serviços (ex: logs, uploads)