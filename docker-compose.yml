version: '3.8'

services:
  # Serviço de Banco de Dados - PostgreSQL
  # Para persistir dados de usuários e status de vídeos
  db:
    image: postgres:15-alpine
    container_name: video-db
    environment:
      POSTGRES_DB: fiap_x_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fiap_x_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço de Mensageria - RabbitMQ
  # Essencial para processar mais de um vídeo ao mesmo tempo e não perder requisições em picos
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: video-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço de Autenticação de Usuários - Protegido por usuário e senha
  user-auth-service:
    build: ../user-auth-service
    container_name: user-auth-service
    ports:
      - "5000:5000"
    environment:
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      PORT: 5000
      JWT_SECRET: "this_is_a_very_long_and_complex_secret_key_for_jwt_fiap_x_project_2025_generated_securely_random" # Chave JWT de exemplo
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  # Serviço de Processamento de Vídeos
  video-processor-service:
    build: ../video-processor-service
    container_name: video-processor-service
    ports:
      - "5001:5001"
    environment:
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      PORT: 5001
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure

volumes:
  db_data: