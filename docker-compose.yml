version: '3.8'

services:
  # ... (serviços db e rabbitmq existentes) ...
  db:
    image: postgres:15-alpine
    container_name: video-db
    environment:
      POSTGRES_DB: fiap_x_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fiap_x_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: video-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-auth-service:
    build: ../user-auth-service
    container_name: user-auth-service
    ports:
      - "5000:5000"
    environment:
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      PORT: 5000
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  # NOVO SERVIÇO: Video Processor Service
  video-processor-service:
    build: ../video-processor-service # Aponta para o Dockerfile
    container_name: video-processor-service
    ports:
      - "5001:5001" # Porta para acessar este serviço (diferente do Auth)
    environment:
      # Variáveis para conexão com o DB
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      # Variáveis para conexão com o RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      PORT: 5001
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Garante que o RabbitMQ esteja pronto
    restart: on-failure

volumes:
  db_data: