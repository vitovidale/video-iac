version: '3.8'

services:
  # Serviço de Banco de Dados - PostgreSQL
  # Para persistir dados de usuários e status de vídeos
  db:
    image: postgres:15-alpine # Versão leve do PostgreSQL
    container_name: video-db
    environment:
      POSTGRES_DB: fiap_x_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432" # Mapeia a porta do container para a porta da sua máquina local
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d # Adiciona o volume para os scripts SQL de inicialização
    healthcheck: # Healthcheck para garantir que o banco está pronto
      test: ["CMD-SHELL", "pg_isready -U user -d fiap_x_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço de Mensageria - RabbitMQ
  # Essencial para processar mais de um vídeo ao mesmo tempo e não perder requisições em picos
  rabbitmq:
    image: rabbitmq:3-management-alpine # RabbitMQ com interface de gerenciamento
    container_name: video-rabbitmq
    ports:
      - "5672:5672" # Porta para comunicação das aplicações
      - "15672:15672" # Porta para a interface de gerenciamento (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck: # Healthcheck básico para RabbitMQ
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço de Autenticação de Usuários - Protegido por usuário e senha
  user-auth-service:
    build: ../user-auth-service # Aponta para o Dockerfile no repositório user-auth-service
    container_name: user-auth-service
    ports:
      - "5000:5000" # Mapeia a porta do container para a porta da sua máquina local
    environment:
      DB_HOST: db # Nome do serviço do banco de dados no docker-compose
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      PORT: 5000 # A porta que o seu Go app vai escutar dentro do container
      JWT_SECRET: "a_very_secure_and_random_jwt_secret_for_fiap_x_tests_gGf09sLp1k2JqW3rT4yU5iO6pA7sD8fG9hJ0kL1zX2cV3bN4mM5qQ6wE7rT8yU9iO0pA1sD2f" # String gerada para testes
    depends_on:
      db:
        condition: service_healthy # Garante que o DB esteja pronto antes de subir
    restart: on-failure # Reinicia o serviço se ele falhar

  # Serviço de Processamento de Vídeos
  video-processor-service:
    build: ../video-processor-service # Aponta para o Dockerfile no repositório video-processor-service
    container_name: video-processor-service
    ports:
      - "5001:5001" # Porta para acessar este serviço (diferente do Auth Service)
    environment:
      # Variáveis para conexão com o DB
      DB_HOST: db
      DB_NAME: fiap_x_db
      DB_USER: user
      DB_PASS: password
      # Variáveis para conexão com o RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      PORT: 5001
      JWT_SECRET: "a_very_secure_and_random_jwt_secret_for_fiap_x_tests_gGf09sLp1k2JqW3rT4yU5iO6pA7sD8fG9hJ0kL1zX2cV3bN4mM5qQ6wE7rT8yU9iO0pA1sD2f" # << MESMA CHAVE DO USER-AUTH-SERVICE!
    volumes:
      - processed_videos_data:/app/processed_videos # <--- NOVO: Volume para persistir os vídeos processados
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Garante que o RabbitMQ esteja pronto antes de subir
    restart: on-failure # Reinicia o serviço se ele falhar

volumes:
  db_data: # Define o volume para o banco de dados
  processed_videos_data: # <--- NOVO: Declara o volume nomeado para vídeos processados